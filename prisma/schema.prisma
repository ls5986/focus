// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  enrolledCourses    Enrollment[]
  instructorCourses  Course[]
  progress           Progress[]
  accounts           Account[]
  sessions           Session[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  price       Float    @default(0)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructor   User         @relation(fields: [instructorId], references: [id])
  instructorId String
  enrollments  Enrollment[]
  sections     Section[]
}

model Section {
  id          String   @id @default(cuid())
  title       String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  order       Int
  duration    Int      // in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  section     Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   String
  progress    Progress[]
  resources   Resource[]
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  type        String   // pdf, doc, etc.
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
}

model Enrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
}

model Progress {
  id          String   @id @default(cuid())
  completed   Boolean  @default(false)
  watchedTime Int      @default(0) // in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
} 